#!/bin/bash
set -e 
set -u

# Clean up function
function cleanup {
    echo "Cleaning up temporary files..."
    rm -f $payload.*
}

# Setup trap for cleanup
trap cleanup EXIT

# Check for arguments
if [ "$2" == "" ]
then
    echo "Usage: ./ThisScript.sh <base64 filename> <org0 key in hex>"
    exit 1
fi
 
# Set input variables
payload="$1"
org0_key="$2"
static_part_key="4083E8338667E61E3056FD9D"

# Process payload
cat $payload | cut -c 4-1000000 | base64 -d > $payload.tmp
dd if=$payload.tmp of=$payload.header bs=1 count=12 2>/dev/null
dd if=$payload.tmp of=$payload.ciphertext bs=1 skip=12 2>/dev/null
 
# Extract header info
data_sha1=$(xxd -s 2 -l 2  $payload.header  |sed 's/ //g' | cut -d ":" -f 2 | tr '[:lower:]' '[:upper:]' | cut -c 1-4)
org0_key_sha1=$(xxd -s 4 -l 4  $payload.header | sed 's/ //g'  | cut -d ":" -f 2 | tr '[:lower:]' '[:upper:]' | cut -c 1-8)
iv=$(xxd -s 8 -l 4  $payload.header | sed 's/ //g' | cut -d ":" -f 2 | tr '[:lower:]' '[:upper:]' | cut -c 1-8 )

iv=$iv$iv$iv$iv
masterkey=$static_part_key$org0_key"00000000"
 
# Output key and IV
echo "[ INFO ]: MasterKey built: $masterkey"
echo "[ INFO ]: Initialization vector: $iv"

# Verify org0 key hash
echo $org0_key | xxd -r -p > $payload.key0
org0_key_sha1_input=$(openssl dgst -sha1 $payload.key0  | awk '{ print $2}' | cut -c 1-8 | tr '[:lower:]' '[:upper:'])

if [ "$org0_key_sha1_input" == "$org0_key_sha1" ]
then
    echo "[ OK ]: Org Key0's hash matches payload's header info"
else
    echo "[ ERROR ]: Org Key0 doesn't match payload's header info"
    exit 1
fi

# Decrypt ciphertext
openssl aes-256-cbc -d -in $payload.ciphertext -out $payload.decrypted -iv $iv -K $masterkey 2>/dev/null

# Verify decrypted data hash
dec_sha1_part=$(openssl dgst -sha1 $payload.decrypted  | awk '{ print $2}' | cut -c 1-4 | tr '[:lower:]' '[:upper:]') 

if [ "$dec_sha1_part" == "$data_sha1" ]
then
    echo "[ OK ]: Decrypted data hash matches payload header hash"
else
    echo "[ ERROR ]: Decrypted data hash does not match payload header hash"
fi

# Output decrypted payload
printf "\n### BEGIN DECRYPTED ###\n"
cat $payload.decrypted | strings
printf "\n### END DECRYPTED ###\n"

# Output decoded decrypted payload
printf "\n### BEGIN DECODED DECRYPTED ###\n"
cat $payload.decrypted|base64 -d | strings
printf "\n### END DECODED DECRYPTED ###\n"
